%% Figura 5.1
clear all; close all; clc;

cvx_begin
cvx_end
[n,link_cost,station_cost,...
station_capacity_slope,demand,prices,...
op_link_cost,congestion_coef_airline, congestion_coef_airport,...
travel_time,alt_time,alt_price,a_nom,tau,sigma,...
a_max,trans_time,s_max,station_hub_cost,distance] = parameters_aero_network();
alfa = 0.5;
beta_or = 7; lam = 10;
dm_pax = 1; 
dm_op = 1; 
coef_logit = 0.3;

filename = sprintf('../red_aero/aero_results/prelim_symmetric_logcoef03_sol_beta=%d_lam=%d.mat',beta_or,lam);
% filename = sprintf('./aero_results/prelim_symmetric_logcoef03_slim_sol_beta=%d_lam=%d.mat',beta_or,lam);
% filename = sprintf('./aero_results/prelim_symmetric_logcoef03_slim_samebud_sol_beta=%d_lam=%d.mat',beta_or,lam);
%  filename = sprintf('./aero_results/prelim_symmetric_logcoef03_alim_sol_beta=%d_lam=%d.mat',beta_or,lam);
%  filename = sprintf('./aero_results/prelim_symmetric_logcoef03_cprices_sol_beta=%d_lam=%d.mat',beta_or,lam);
%   filename = sprintf('./aero_results/prelim_symmetric_logcoef03_pesimistic_sol_beta=%d_lam=%d.mat',beta_or,lam);
%  filename = sprintf('./aero_results/prelim_symmetric_logcoef03_optimistic_sol_beta=%d_lam=%d.mat',beta_or,lam);

load(filename);

figure('Position', [100, 100, 450, 300]);

CAB_data = readtable('../red_aero/CAB_data.xlsx');
coor_x = table2array(CAB_data(1:25,1));
coor_y = table2array(CAB_data(1:25,2));

[obj_val,pax_obj,op_obj] = get_obj_val(alfa,...
a, s_h_prim,s_prim,delta_s,delta_s_h,delta_s_prim,fij,f,fext,dm_pax,dm_op,coef_logit);
disp(['beta = ',num2str(beta_or), ', lam = ',num2str(lam)]);
budget = get_budget(s_prim,s_h_prim,a,n,...
station_cost,station_hub_cost,station_capacity_slope,link_cost,lam);
disp(['budget = ',num2str(budget)]);
att_dem = sum(sum(demand.*f))/sum(sum(demand));
disp(['att dem = ',num2str(att_dem)]);
disp(['nhubs = ',num2str(sum(s_h > 0))]);
disp(['nairports = ',num2str(sum(s + s_h > 0))]);
disp(['nlinks =',num2str(sum(sum(a > 0.01)))]);


ingresos = 0;
rask = zeros(n);
rask_t = 0;
rev = 0;
ask = 0;
cask_num = 0;
cask_den = 0;
distance = (travel_time-0.6).*450;
for o=1:n
for d=1:n
    ingresos = ingresos + f(o,d)*prices(o,d)*demand(o,d);
    if f(o,d) > 0.001
        rask(o,d) = prices(o,d)*demand(o,d)*f(o,d)./(demand(o,d)*sum(sum(squeeze(fij(:,:,o,d)).*distance)));
        rev = rev + prices(o,d)*demand(o,d)*f(o,d);
        ask = ask  + demand(o,d)*sum(sum(squeeze(fij(:,:,o,d)).*distance));
        
    end
end
end
for i=1:n
for j=1:n
    cask_num = cask_num + op_link_cost(i,j)*a(i,j);
    cask_den = cask_den + a_nom*a(i,j)*distance(i,j);
end
end
gastos = sum(sum(op_link_cost.*a));
beneficios = ingresos - gastos;
disp(['beneficios= ',num2str(beneficios)]);
disp(['RASK = ',num2str(mean(mean(rev/ask)))]);
disp(['CASK = ',num2str(mean(mean(cask_num/cask_den)))]);
disp(['tiempo = ',num2str(comp_time)]);
a(a < 0.01) = 0;
g = graph(a);
colormap parula
colors = colormap;
[sorted_edges,sorted_edges_pos] = sort(g.Edges.Weight,'ascend');
scaled_pos = round(sorted_edges_pos.*(length(colors)/length(sorted_edges_pos)));
colores_edg = colors( round(1 + g.Edges.Weight .* length(colors)/max(g.Edges.Weight+1)) ,:);
colores = zeros(n,3);
for i=1:n
if s_h(i) > 0.1
    colores(i,:) = [0.6350 0.0780 0.1840];
else
    colores(i,:) = [0 0 0];
end
end
hg = plot(g,'XData',coor_x-mean(coor_x),'YData',coor_y-mean(coor_y), ...
'MarkerSize',0.7*(s_h+s).^0.5 +1e-2,'LineWidth', ...
0.1.*g.Edges.Weight,'NodeColor',colores,'EdgeColor',colores_edg,'EdgeAlpha',0.7,'NodeFontSize',9, ...
'Interpreter','latex','NodeLabel',{});


xticks([]); yticks([]); 
caxis([0,35]);
c = colorbar;
c.TickLabelInterpreter = 'latex';
hold on
I = imread('../red_aero/us_map.jpg'); 
h = image(0.93*xlim,-ylim,I); 
uistack(h,'bottom');
tit = ['$\lambda = ',num2str(lam),', \beta = ',num2str(beta_or),' , ', num2str(length(g.Edges.Weight)*2),'$ enlaces',...
', D.A. $= ',num2str(att_dem*100,2),'\%$'];
title(tit,'FontSize',9,'Interpreter','latex');
axis off


% Obtener las coordenadas de los nodos
x = hg.XData;
y = hg.YData;

% Calcular las distancias entre todos los pares de nodos
distances = squareform(pdist([x' y']));

% Definir un umbral para considerar que los nodos están cerca
threshold = 100; % Ajusta este valor según tus datos
data2norm = @(ax, data) (data - ax.YLim(1)) ./ diff(ax.YLim);
% Ajustar las etiquetas de los nodos cercanos
hold on;
n=25;
for i = 1:n
    
    dib_nodo = 1;
    for j = [1:(i-1),(i+1):n]
        if distances(i,j) < threshold
            dib_nodo = 0;
        end
    end
    if dib_nodo == 1
        text(x(i)+30, y(i)+30, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
            'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
    else
        disp(['nodo ',num2str(i)])
    end
end
i=9; hold on;
text(x(i)+30, y(i)+500, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
            'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
hold on;
plot([x(i),x(i)+30],[y(i),y(i)+480],'LineWidth',1,'Color',[0.5 0.5 0.5]);

i=6; hold on;
text(x(i)+70, y(i)+410, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
            'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
hold on;
plot([x(i),x(i)+70],[y(i),y(i)+390],'LineWidth',1,'Color',[0.5 0.5 0.5]);

i=2; hold on;
text(x(i)+450, y(i)-120, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
            'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
hold on;
plot([x(i),x(i)+430],[y(i),y(i)-120],'LineWidth',1,'Color',[0.5 0.5 0.5]);

i=17; hold on;
text(x(i)+400, y(i)+50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
            'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
hold on;
plot([x(i),x(i)+380],[y(i),y(i)+50],'LineWidth',1,'Color',[0.5 0.5 0.5]);


i=18; hold on;
text(x(i)+450, y(i)-50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
            'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
hold on;
plot([x(i),x(i)+430],[y(i),y(i)-50],'LineWidth',1,'Color',[0.5 0.5 0.5]);


i=25; hold on;
text(x(i)+470, y(i)-280, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
            'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
hold on;
plot([x(i),x(i)+450],[y(i),y(i)-280],'LineWidth',1,'Color',[0.5 0.5 0.5]);


hold off;



figurename = sprintf('./figures5/aero_topologia_original_base.png');
saveas(gcf, figurename);


%% Figura 5.2
clear all; close all; clc;
[n,link_cost,station_cost,...
station_capacity_slope,demand,prices,...
op_link_cost,congestion_coef_airline, congestion_coef_airport,...
travel_time,alt_time,alt_price,a_nom,tau,sigma,...
a_max,trans_time,s_max,station_hub_cost,distance] = parameters_aero_network();

beta_or = 7; lam = 10;

filename = sprintf('../red_aero/aero_results/prelim_symmetric_logcoef03_sol_beta=%d_lam=%d.mat',beta_or,lam);
% filename = sprintf('./aero_results/prelim_symmetric_logcoef03_slim_sol_beta=%d_lam=%d.mat',beta_or,lam);
% filename = sprintf('./aero_results/prelim_symmetric_logcoef03_slim_samebud_sol_beta=%d_lam=%d.mat',beta_or,lam);
%  filename = sprintf('./aero_results/prelim_symmetric_logcoef03_alim_sol_beta=%d_lam=%d.mat',beta_or,lam);
%  filename = sprintf('./aero_results/prelim_symmetric_logcoef03_cprices_sol_beta=%d_lam=%d.mat',beta_or,lam);
%   filename = sprintf('./aero_results/prelim_symmetric_logcoef03_pesimistic_sol_beta=%d_lam=%d.mat',beta_or,lam);
%  filename = sprintf('./aero_results/prelim_symmetric_logcoef03_optimistic_sol_beta=%d_lam=%d.mat',beta_or,lam);

load(filename);

figure('Position', [100, 100, 450, 200]);
for nodo=1:n
    total_nodo = sum(sum(squeeze(permute(sum(fij(nodo,:,:,:),2),[3,4,1,2])).*demand)) + sum(sum(squeeze(permute(sum(fij(:,nodo,:,:),1),[3,4,1,2])).*demand));
    propio_nodo = sum(sum(squeeze(permute(sum(fij(nodo,:,nodo,:),2),[3,4,1,2])).*demand(nodo,:))) + sum(sum(squeeze(permute(sum(fij(:,nodo,:,nodo),1),[3,4,1,2])).*demand(:,nodo)));
    prop_directo(nodo) = propio_nodo/total_nodo;
end
figure(1);
stem(100.*(1-prop_directo),'LineWidth',1.5);
ax = gca;
names = {'Atlanta','Baltimore','Boston','Chicago','Cincinatti',...
    'Cleveland','Dallas','Denver','Detroit','Houston','Kansas','Los Angeles',...
    'Memphis','Miami','Minneapolis','Nueva Orleans','Nueva York',...
    'Filadelfia','Phoenix','Pittsburgh','St. Luis','San Francisco',...
    'Seattle','Tampa','Washington DC'};
xticks(1:25)
xticklabels(names);
yticks(0:5:20);
ylim([0 20]);
xlim([0.75 25.25]);
grid on;
yticklabels({'$0 \%$','$5 \%$','$10 \%$','$15 \%$','$20 \%$'});
ylabel('[\%] de vuelos totales','Interpreter','latex');
%yl = ylabel('% de vuelos de conexión')
ax.XTickLabelRotation = 60;
ax.FontSize = 9;
ax.XAxis.TickLabelInterpreter = 'latex';
ax.YAxis.TickLabelInterpreter = 'latex';

figurename = sprintf('./figures5/aero_escalas_casobase.png');
saveas(gcf, figurename);


%% Figura 5.3

clear all; close all; clc;
[n,link_cost,station_cost,...
station_capacity_slope,demand,prices,...
op_link_cost,congestion_coef_airline, congestion_coef_airport,...
travel_time,alt_time,alt_price,a_nom,tau,sigma,...
a_max,trans_time,s_max,station_hub_cost,distance] = parameters_aero_network();
figure('Position', [100, 100, 650, 510]);
t = tiledlayout(3, 3, 'TileSpacing', 'none', 'Padding', 'none');
counter = 0;
CAB_data = readtable('../red_aero/CAB_data.xlsx');
coor_x = table2array(CAB_data(1:25,1));
coor_y = table2array(CAB_data(1:25,2));
betas = [5,7,10]; lams = [5,10,20];

for bb=1:length(betas)
    beta_or = betas(bb);
    for ll=1:length(lams)
        counter = counter+1;
        lam = lams(ll);
        filename = sprintf('../red_aero/aero_results/prelim_symmetric_logcoef03_sol_beta=%d_lam=%d.mat',beta_or,lam);
        load(filename);

        att_dem = sum(sum(demand.*f))/sum(sum(demand));

        a(a < 0.01) = 0;
        g = graph(a);
        colormap parula
        colors = colormap;
        [sorted_edges,sorted_edges_pos] = sort(g.Edges.Weight,'ascend');
        scaled_pos = round(sorted_edges_pos.*(length(colors)/length(sorted_edges_pos)));
        colores_edg = colors( round(1 + g.Edges.Weight .* length(colors)/max(g.Edges.Weight+1)) ,:);
        colores = zeros(n,3);
        for i=1:n
        if s_h(i) > 0.1
            colores(i,:) = [0.6350 0.0780 0.1840];
        else
            colores(i,:) = [0 0 0];
        end
        end
        %subplot(3,3,counter);
        nexttile
        hg = plot(g,'XData',coor_x-mean(coor_x),'YData',coor_y-mean(coor_y), ...
        'MarkerSize',0.5*(s_h+s).^0.5 +1e-2,'LineWidth', ...
        0.07.*g.Edges.Weight,'NodeColor',colores,'EdgeColor',colores_edg, ...
        'EdgeAlpha',0.5,'NodeFontSize',8,'Interpreter','latex', ...
        'NodeLabel',{});
        xticks([]); yticks([]); 
        %caxis([min(g.Edges.Weight),max(g.Edges.Weight)]);
        caxis([0,35]);
        if counter == 6
            c = colorbar;
            c.TickLabelInterpreter = 'latex';
        end
        hold on
        I = imread('../red_aero/us_map.jpg'); 
        h = image(0.93*xlim,-ylim,I); 
        uistack(h,'bottom');
        tit = ['$\lambda = ',num2str(lam),', \beta = ',num2str(beta_or),' , ', num2str(length(g.Edges.Weight)*2),'$ enlaces',...
        ', D.A. $= ',num2str(att_dem*100,2),'\%$'];
        title(tit,'FontSize',9,'Interpreter','latex');
        axis off

        % Obtener las coordenadas de los nodos
        x = hg.XData;
        y = hg.YData;
        
        % Calcular las distancias entre todos los pares de nodos
        distances = squareform(pdist([x' y']));
        
        % Definir un umbral para considerar que los nodos están cerca
        threshold = 100; % Ajusta este valor según tus datos
        data2norm = @(ax, data) (data - ax.YLim(1)) ./ diff(ax.YLim);
        % Ajustar las etiquetas de los nodos cercanos
        hold on;
        n=25;
        for i = 1:n
            
            dib_nodo = 1;
            for j = [1:(i-1),(i+1):n]
                if distances(i,j) < threshold
                    dib_nodo = 0;
                end
            end
            if dib_nodo == 1
                text(x(i)+30, y(i)+30, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
            else
                disp(['nodo ',num2str(i)])
            end
        end
        i=9; hold on;
        text(x(i)+30, y(i)+500, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+30],[y(i),y(i)+480],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=6; hold on;
        text(x(i)+70, y(i)+410, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+70],[y(i),y(i)+390],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=2; hold on;
        text(x(i)+450, y(i)-120, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+430],[y(i),y(i)-120],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=17; hold on;
        text(x(i)+400, y(i)+50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+380],[y(i),y(i)+50],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        i=18; hold on;
        text(x(i)+450, y(i)-50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+430],[y(i),y(i)-50],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        i=25; hold on;
        text(x(i)+470, y(i)-280, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+450],[y(i),y(i)-280],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        hold off;


    end
end


figurename = sprintf('./figures5/aero_topologia_original_todas.png');
saveas(gcf, figurename);



%% Figura 5.4 - slim


clear all; close all; clc;
[n,link_cost,station_cost,...
station_capacity_slope,demand,prices,...
op_link_cost,congestion_coef_airline, congestion_coef_airport,...
travel_time,alt_time,alt_price,a_nom,tau,sigma,...
a_max,trans_time,s_max,station_hub_cost,distance] = parameters_aero_network();
figure('Position', [100, 100, 650, 510]);
t = tiledlayout(3, 3, 'TileSpacing', 'none', 'Padding', 'none');
counter = 0;
CAB_data = readtable('../red_aero/CAB_data.xlsx');
coor_x = table2array(CAB_data(1:25,1));
coor_y = table2array(CAB_data(1:25,2));
betas = [5,7,10]; lams = [5,10,20];

for bb=1:length(betas)
    beta_or = betas(bb);
    for ll=1:length(lams)
        counter = counter+1;
        lam = lams(ll);
        filename = sprintf('../red_aero/aero_results/prelim_symmetric_logcoef03_slim_sol_beta=%d_lam=%d.mat',beta_or,lam);
        load(filename);

        att_dem = sum(sum(demand.*f))/sum(sum(demand));

        a(a < 0.01) = 0;
        g = graph(a);
        colormap parula
        colors = colormap;
        [sorted_edges,sorted_edges_pos] = sort(g.Edges.Weight,'ascend');
        scaled_pos = round(sorted_edges_pos.*(length(colors)/length(sorted_edges_pos)));
        colores_edg = colors( round(1 + g.Edges.Weight .* length(colors)/max(g.Edges.Weight+1)) ,:);
        colores = zeros(n,3);
        for i=1:n
        if s_h(i) > 0.1
            colores(i,:) = [0.6350 0.0780 0.1840];
        else
            colores(i,:) = [0 0 0];
        end
        end
        %subplot(3,3,counter);
        nexttile
        hg = plot(g,'XData',coor_x-mean(coor_x),'YData',coor_y-mean(coor_y), ...
        'MarkerSize',0.5*(s_h+s).^0.5 +1e-2,'LineWidth', ...
        0.07.*g.Edges.Weight,'NodeColor',colores,'EdgeColor',colores_edg, ...
        'EdgeAlpha',0.5,'NodeFontSize',8,'Interpreter','latex', ...
        'NodeLabel',{});
        xticks([]); yticks([]); 
        %caxis([min(g.Edges.Weight),max(g.Edges.Weight)]);
        caxis([0,35]);
        if counter == 6
            c = colorbar;
            c.TickLabelInterpreter = 'latex';
        end
        hold on
        I = imread('../red_aero/us_map.jpg'); 
        h = image(0.93*xlim,-ylim,I); 
        uistack(h,'bottom');
        tit = ['$\lambda = ',num2str(lam),', \beta = ',num2str(beta_or),' , ', num2str(length(g.Edges.Weight)*2),'$ enlaces',...
        ', D.A. $= ',num2str(att_dem*100,2),'\%$'];
        title(tit,'FontSize',9,'Interpreter','latex');
        axis off

        % Obtener las coordenadas de los nodos
        x = hg.XData;
        y = hg.YData;
        
        % Calcular las distancias entre todos los pares de nodos
        distances = squareform(pdist([x' y']));
        
        % Definir un umbral para considerar que los nodos están cerca
        threshold = 100; % Ajusta este valor según tus datos
        data2norm = @(ax, data) (data - ax.YLim(1)) ./ diff(ax.YLim);
        % Ajustar las etiquetas de los nodos cercanos
        hold on;
        n=25;
        for i = 1:n
            
            dib_nodo = 1;
            for j = [1:(i-1),(i+1):n]
                if distances(i,j) < threshold
                    dib_nodo = 0;
                end
            end
            if dib_nodo == 1
                text(x(i)+30, y(i)+30, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
            else
                disp(['nodo ',num2str(i)])
            end
        end
        i=9; hold on;
        text(x(i)+30, y(i)+500, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+30],[y(i),y(i)+480],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=6; hold on;
        text(x(i)+70, y(i)+410, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+70],[y(i),y(i)+390],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=2; hold on;
        text(x(i)+450, y(i)-120, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+430],[y(i),y(i)-120],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=17; hold on;
        text(x(i)+400, y(i)+50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+380],[y(i),y(i)+50],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        i=18; hold on;
        text(x(i)+450, y(i)-50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+430],[y(i),y(i)-50],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        i=25; hold on;
        text(x(i)+470, y(i)-280, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+450],[y(i),y(i)-280],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        hold off;


    end
end


figurename = sprintf('./figures5/aero_topologia_slim.png');
saveas(gcf, figurename);


%% Figura 5.5 - slim, same bud


clear all; close all; clc;
[n,link_cost,station_cost,...
station_capacity_slope,demand,prices,...
op_link_cost,congestion_coef_airline, congestion_coef_airport,...
travel_time,alt_time,alt_price,a_nom,tau,sigma,...
a_max,trans_time,s_max,station_hub_cost,distance] = parameters_aero_network();
figure('Position', [100, 100, 650, 250]);
t = tiledlayout(1, 3, 'TileSpacing', 'none', 'Padding', 'none');
counter = 0;
CAB_data = readtable('../red_aero/CAB_data.xlsx');
coor_x = table2array(CAB_data(1:25,1));
coor_y = table2array(CAB_data(1:25,2));
betas = [3.6,3.6,5.9]; lams = [5,10,20];
lam = 5;

for bb=1:length(betas)
    beta_or = betas(bb);
        counter = counter+1;
        filename = sprintf('../red_aero/aero_results/prelim_symmetric_logcoef03_slim_samebud_sol_beta=%d_lam=%d.mat',beta_or,lam);
        load(filename);
        att_dem = sum(sum(demand.*f))/sum(sum(demand));

        a(a < 0.01) = 0;
        g = graph(a);
        colormap parula
        colors = colormap;
        [sorted_edges,sorted_edges_pos] = sort(g.Edges.Weight,'ascend');
        scaled_pos = round(sorted_edges_pos.*(length(colors)/length(sorted_edges_pos)));
        colores_edg = colors( round(1 + g.Edges.Weight .* length(colors)/max(g.Edges.Weight+1)) ,:);
        colores = zeros(n,3);
        for i=1:n
        if s_h(i) > 0.1
            colores(i,:) = [0.6350 0.0780 0.1840];
        else
            colores(i,:) = [0 0 0];
        end
        end
        %subplot(3,3,counter);
        nexttile
        hg = plot(g,'XData',coor_x-mean(coor_x),'YData',coor_y-mean(coor_y), ...
        'MarkerSize',0.5*(s_h+s).^0.5 +1e-2,'LineWidth', ...
        0.07.*g.Edges.Weight,'NodeColor',colores,'EdgeColor',colores_edg, ...
        'EdgeAlpha',0.5,'NodeFontSize',8,'Interpreter','latex', ...
        'NodeLabel',{});
        xticks([]); yticks([]); 
        %caxis([min(g.Edges.Weight),max(g.Edges.Weight)]);
        caxis([0,35]);
        if counter == 3
            c = colorbar;
            c.TickLabelInterpreter = 'latex';
        end
        hold on
        I = imread('../red_aero/us_map.jpg'); 
        h = image(0.93*xlim,-ylim,I); 
        uistack(h,'bottom');
        tit = ['$\lambda = ',num2str(lam),', \beta = ',num2str(beta_or),' , ', num2str(length(g.Edges.Weight)*2),'$ enlaces',...
        ', D.A. $= ',num2str(att_dem*100,2),'\%$'];
        title(tit,'FontSize',9,'Interpreter','latex');
        axis off

        % Obtener las coordenadas de los nodos
        x = hg.XData;
        y = hg.YData;
        
        % Calcular las distancias entre todos los pares de nodos
        distances = squareform(pdist([x' y']));
        
        % Definir un umbral para considerar que los nodos están cerca
        threshold = 100; % Ajusta este valor según tus datos
        data2norm = @(ax, data) (data - ax.YLim(1)) ./ diff(ax.YLim);
        % Ajustar las etiquetas de los nodos cercanos
        hold on;
        n=25;
        for i = 1:n
            
            dib_nodo = 1;
            for j = [1:(i-1),(i+1):n]
                if distances(i,j) < threshold
                    dib_nodo = 0;
                end
            end
            if dib_nodo == 1
                text(x(i)+30, y(i)+30, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
            else
                disp(['nodo ',num2str(i)])
            end
        end
        i=9; hold on;
        text(x(i)+30, y(i)+500, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+30],[y(i),y(i)+480],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=6; hold on;
        text(x(i)+70, y(i)+410, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+70],[y(i),y(i)+390],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=2; hold on;
        text(x(i)+450, y(i)-120, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+430],[y(i),y(i)-120],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=17; hold on;
        text(x(i)+400, y(i)+50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+380],[y(i),y(i)+50],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        i=18; hold on;
        text(x(i)+450, y(i)-50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+430],[y(i),y(i)-50],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        i=25; hold on;
        text(x(i)+470, y(i)-280, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+450],[y(i),y(i)-280],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        hold off;

    lam = 2*lam;
end


figurename = sprintf('./figures5/aero_topologia_slim_samebud.png');
saveas(gcf, figurename);


%% Figura 5.4 - slim


clear all; close all; clc;
[n,link_cost,station_cost,...
station_capacity_slope,demand,prices,...
op_link_cost,congestion_coef_airline, congestion_coef_airport,...
travel_time,alt_time,alt_price,a_nom,tau,sigma,...
a_max,trans_time,s_max,station_hub_cost,distance] = parameters_aero_network();
figure('Position', [100, 100, 650, 510]);
t = tiledlayout(3, 3, 'TileSpacing', 'none', 'Padding', 'none');
counter = 0;
CAB_data = readtable('../red_aero/CAB_data.xlsx');
coor_x = table2array(CAB_data(1:25,1));
coor_y = table2array(CAB_data(1:25,2));
betas = [5,7,10]; lams = [5,10,20];

for bb=1:length(betas)
    beta_or = betas(bb);
    for ll=1:length(lams)
        counter = counter+1;
        lam = lams(ll);
        filename = sprintf('../red_aero/aero_results/prelim_symmetric_logcoef03_slim_sol_beta=%d_lam=%d.mat',beta_or,lam);
        load(filename);

        att_dem = sum(sum(demand.*f))/sum(sum(demand));

        a(a < 0.01) = 0;
        g = graph(a);
        colormap parula
        colors = colormap;
        [sorted_edges,sorted_edges_pos] = sort(g.Edges.Weight,'ascend');
        scaled_pos = round(sorted_edges_pos.*(length(colors)/length(sorted_edges_pos)));
        colores_edg = colors( round(1 + g.Edges.Weight .* length(colors)/max(g.Edges.Weight+1)) ,:);
        colores = zeros(n,3);
        for i=1:n
        if s_h(i) > 0.1
            colores(i,:) = [0.6350 0.0780 0.1840];
        else
            colores(i,:) = [0 0 0];
        end
        end
        %subplot(3,3,counter);
        nexttile
        hg = plot(g,'XData',coor_x-mean(coor_x),'YData',coor_y-mean(coor_y), ...
        'MarkerSize',0.5*(s_h+s).^0.5 +1e-2,'LineWidth', ...
        0.07.*g.Edges.Weight,'NodeColor',colores,'EdgeColor',colores_edg, ...
        'EdgeAlpha',0.5,'NodeFontSize',8,'Interpreter','latex', ...
        'NodeLabel',{});
        xticks([]); yticks([]); 
        %caxis([min(g.Edges.Weight),max(g.Edges.Weight)]);
        caxis([0,35]);
        if counter == 6
            c = colorbar;
            c.TickLabelInterpreter = 'latex';
        end
        hold on
        I = imread('../red_aero/us_map.jpg'); 
        h = image(0.93*xlim,-ylim,I); 
        uistack(h,'bottom');
        tit = ['$\lambda = ',num2str(lam),', \beta = ',num2str(beta_or),' , ', num2str(length(g.Edges.Weight)*2),'$ enlaces',...
        ', D.A. $= ',num2str(att_dem*100,2),'\%$'];
        title(tit,'FontSize',9,'Interpreter','latex');
        axis off

        % Obtener las coordenadas de los nodos
        x = hg.XData;
        y = hg.YData;
        
        % Calcular las distancias entre todos los pares de nodos
        distances = squareform(pdist([x' y']));
        
        % Definir un umbral para considerar que los nodos están cerca
        threshold = 100; % Ajusta este valor según tus datos
        data2norm = @(ax, data) (data - ax.YLim(1)) ./ diff(ax.YLim);
        % Ajustar las etiquetas de los nodos cercanos
        hold on;
        n=25;
        for i = 1:n
            
            dib_nodo = 1;
            for j = [1:(i-1),(i+1):n]
                if distances(i,j) < threshold
                    dib_nodo = 0;
                end
            end
            if dib_nodo == 1
                text(x(i)+30, y(i)+30, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
            else
                disp(['nodo ',num2str(i)])
            end
        end
        i=9; hold on;
        text(x(i)+30, y(i)+500, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+30],[y(i),y(i)+480],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=6; hold on;
        text(x(i)+70, y(i)+410, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+70],[y(i),y(i)+390],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=2; hold on;
        text(x(i)+450, y(i)-120, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+430],[y(i),y(i)-120],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        i=17; hold on;
        text(x(i)+400, y(i)+50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+380],[y(i),y(i)+50],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        i=18; hold on;
        text(x(i)+450, y(i)-50, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+430],[y(i),y(i)-50],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        i=25; hold on;
        text(x(i)+470, y(i)-280, num2str(i), 'FontSize', 9, 'HorizontalAlignment', ...
                    'center', 'VerticalAlignment', 'middle','Interpreter', 'latex');
        hold on;
        plot([x(i),x(i)+450],[y(i),y(i)-280],'LineWidth',1,'Color',[0.5 0.5 0.5]);
        
        
        hold off;


    end
end


figurename = sprintf('./figures5/aero_topologia_optimista.png');
saveas(gcf, figurename);

%% Funciones






function [n,link_cost,station_cost,...
    station_capacity_slope,demand,prices,...
    op_link_cost,congestion_coef_airline, congestion_coef_airport,...
    travel_time,alt_time,alt_price,a_nom,tau,sigma,...
    a_max,trans_time,s_max,station_hub_cost,distance] = parameters_aero_network()
    n = 25; 
    CAB_data = readtable('../red_aero/CAB_data.xlsx');
    coor_x = table2array(CAB_data(1:25,1));
    coor_y = table2array(CAB_data(1:25,2));
    demand = table2array(CAB_data(26:50,1:25));
    demand = 1.1214.*demand.*(4/30);
 %   midwest = [5,8,9,15,21];
  %  demand(midwest,midwest) = 5*demand(midwest,midwest);
    distance = zeros(n);
    for i=1:n
        distance(i,i) = 0;
        for j=i+1:n
            distance(i,j) = sqrt((coor_x(i) - coor_x(j)).^2 + ...
            (coor_y(i)-coor_y(j)).^2);
            distance(j,i) = distance(i,j);
        end
    end
    
    %cost of using the alternative network for each o-d pair
    rng(1,"twister"); %seed
    
    Prob_nonstop=0.2;
    alt_cost = zeros(n);
    for i=1:n
        for j=i+1:n
            dist_ij=distance(i,j);
            nonstopflight = rand(5,1)<Prob_nonstop;
            distance_compet = (nonstopflight*dist_ij + (1-nonstopflight).*(720 +(0.5+0.7*rand(5,1)+0.5+0.7*rand(5,1))*dist_ij))*1e-4;
            distance_compet = (nonstopflight*dist_ij + (1-nonstopflight).*(720 +(1 + 0.2*randn(5,1).^2 + 0.2*randn(5,1).^2)*dist_ij))*1e-4;
            if (i==12) && (j == 17)
                nonstopflight = rand(5,1) < 0.8;
                distance_compet = (nonstopflight*dist_ij + (1-nonstopflight).*(720 +(1 + 0.2*randn(5,1).^2 + 0.2*randn(5,1).^2)*dist_ij))*1e-4;
            end
            alt_cost(i,j)=-log(mean(exp(-distance_compet)))*1e4;
            alt_cost(j,i) = alt_cost(i,j);
            
        end
    end
    
    %fixed cost for constructing links
    link_cost = 1e-1.*ones(n); %poner muy pequeño, si no forzar sparsity aparte.
    %digo que es el estudio de la ruta
    
    %fixed cost for constructing stations
    station_cost = 2e3.*ones(1,n); %oficinas, tasas del aeropuerto 

    station_hub_cost = 5e3.*ones(1,n);
    
    station_capacity_slope = (5*5e2 + 4*50*8).*ones(1,n); %500 e dia por estacionamiento aeronaves + 50e/hora personal*4pax

    % Congestion Coefficients
    congestion_coef_airline = 0.1;
    congestion_coef_airport = 0.1;
    
    % Prices
    
    prices = (1.7549.*(distance).^(0.7) + 0.088158.*(demand.^1.1).*mean(mean(distance.^0.7))./mean(mean(demand.^1.1)));
 %   prices = (1.058/1.1214).*prices;
 %   prices = (1.843058*0.6.*(distance).^(0.7) + 1.843058*0.4.*(demand.^1.1).*mean(mean(distance.^0.7))./mean(mean(demand.^1.1)));
    %1.843058
  %  prices = (0.9.*(distance).^(0.7) + 0.27.*(demand.^1.1).*mean(distance.^0.7)./mean(demand.^1.1));
%    prices = prices.*(72.9502/142.2529);
 %   prices = (0.9.*(distance).^(0.7) + 0.27.*(demand.^1.1).*mean(distance.^0.7)./mean(demand.^1.1));
  %  prices = prices.*(72.9502/142.2529);
    
    % Travel Time
    travel_time = distance ./ 450 + 0.6; % Time in hours
    
    % Alt Time
    alt_time = alt_cost ./ 450 + 0.6; % Time in hours

    % Op Link Cost
    op_link_cost = 5e3.*travel_time; %5k/hora, lo disminuyo para esta sim
    
    trans_time = ones(n,n,n,n);
    
    for o=1:n
        for i=1:n 
            trans_time(:,:,o,o) = 0;
            trans_time(i,i,:,:) = 0;
            trans_time(o,i,o,:) = 0;
        end
    end
    
    alt_price = (1.7549.*(alt_cost).^(0.7) +  0.088158.*(demand.^1.1).*mean(mean(alt_cost.^0.7))./mean(mean(demand.^1.1)));
   % alt_price = (1.058/1.1214).*alt_price;
   % alt_price = (1.843058*0.6.*(alt_cost).^(0.7) +  1.843058*0.4.*(demand.^1.1).*mean(mean(alt_cost.^0.7))./mean(mean(demand.^1.1)));
 %   alt_price = (0.9.*(alt_cost).^(0.7) + 0.27.*(demand.^1.1).*mean(alt_cost.^0.7)./mean(demand.^1.1));
   % alt_price = (0.9.*(alt_cost).^(0.7) + 0.27.*(demand.^1.1).*mean(alt_cost.^0.7)./mean(demand.^1.1));
   % alt_price = alt_price.*(113.8453/221.9983); %media con los  datos anteriores/media actual
    
    a_nom = 220;             
    
    tau = 0.85;
    sigma = 0.18; %sigma en formulacion, ver guille. 14,15 y 16, vuelos totales.
    a_max = 1e9;
    s_max = 1e5;

    %neutro = 1.1214
    %pesimista = 1.058
    %optimista = 1.18
end


function [obj_val,pax_obj,op_obj] = get_obj_val(alfa,...
    a, s_h_prim,s_prim,delta_s,delta_s_h,delta_s_prim,fij,f,fext,dm_pax,dm_op,coef_logit)
    n = 25;
    [n,link_cost,station_cost,...
    station_capacity_slope,demand,prices,...
    op_link_cost,congestion_coef_airline, congestion_coef_airport,...
    travel_time,alt_time,alt_price,a_nom,tau,sigma,...
    a_max,trans_time,s_max,station_hub_cost] = parameters_aero_network();          
    eps = 1e-3;

    op_obj = 0;
    pax_obj = 0;
    op_obj = op_obj + 1e-6*(sum(sum(op_link_cost.*a))); %operation costs
    
    f = max(f,0);
    fext = max(fext,0);

    for i=1:n
        if s_prim(i) > 0
            pax_obj = pax_obj + 1e-6*(sum(inv_pos(congestion_coef_airline.*delta_s(i) + eps))); %congestion costs
        end
        if s_h_prim(i) > 0
            pax_obj = pax_obj + 1e-6*(sum(inv_pos(congestion_coef_airline.*delta_s_h(i) + eps)));
        end
        if (s_prim(i) > 0) | (s_h_prim(i) > 0)
            pax_obj = pax_obj + 1e-6*(sum(inv_pos(congestion_coef_airport.*delta_s_prim(i) + eps)));
        end
    end
    for o=1:n
        for d=1:n
            pax_obj = pax_obj + 1e-6*(demand(o,d).*prices(o,d).*sum(sum((travel_time+trans_time(:,:,o,d)).*fij(:,:,o,d).*coef_logit))); 
        end
    end
    pax_obj = pax_obj + 1e-6*(sum(sum(demand.*prices.*(alt_time+0.01.*alt_price).*fext.*coef_logit)));
    pax_obj = pax_obj + 1e-6*(sum(sum(demand.*prices.*(-entr(f) - f)))) + 1e-6*(sum(sum(demand.*prices.*0.01.*prices.*f.*coef_logit)));
    pax_obj = pax_obj + 1e-6*(sum(sum(demand.*prices.*(-5.*entr(0.2.*fext) - fext))));
    
    obj_val = (alfa/(dm_pax))*pax_obj + ((1-alfa)/(dm_op))*op_obj;
end

function budget = get_budget(s_prim,s_h_prim,a,n,...
    station_cost,station_hub_cost,station_capacity_slope,link_cost,lam)
    budget = 0;
    sigma = 0.18;
    budget = budget + sum(station_capacity_slope'.*(s_prim + s_h_prim));
    for i=1:n
        if (s_prim(i) > 0.1*sigma) | (s_h_prim(i) > 0.1*sigma)
            budget = budget + station_cost(i);
        end
        if s_h_prim(i) > 0.1
            budget = budget + lam*station_hub_cost(i);
        end
        for j=1:n
            if a(i,j) > 0.1
                budget = budget + link_cost(i,j);
            end
        end
    end
end